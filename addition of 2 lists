#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>
typedef struct LinkedListNode LinkedListNode;

struct LinkedListNode {
    int val;
    LinkedListNode *next;
};

LinkedListNode* _insert_node_into_singlylinkedlist(LinkedListNode *head, LinkedListNode *tail, int val) {
    if(head == NULL) {
        head = (LinkedListNode *) (malloc(sizeof(LinkedListNode)));
        head->val = val;
        head->next = NULL;
        tail = head;
    }
    else {
        LinkedListNode *node = (LinkedListNode *) (malloc(sizeof(LinkedListNode)));
        node->val = val;
        node->next = NULL;
        tail->next = node;
        tail = tail->next;
    }
    return tail;
}
LinkedListNode* addLists(LinkedListNode* list1, LinkedListNode* list2) {
    int i,j;
    int a[100],b[100];   
    while(list1)
    {
        a[i++]=list1->val;     // take the elements of list 1 to a array
        list1=list1->next;
    }
    while(list2)
    {
        b[j++]=list2->val;    // take the elements of list 2 to b array
        list2=list2->next;
    }
    int sizea=i,sizeb=j;   // according to which array size is bigger 
    if(i>=j)
    {
        while(i&&j)
        {
            a[--i]+=b[--j];  //adding every elements in both the array
        }
        for(int x=sizea-1;x>0;x--)
        {
            if(a[x]>=10)     // if the sum is more than or equal to 10 then carry is moved on to the previous index.
            {
                a[x]%=10;
                a[x-1]+=1;
            }
        }
    }
    else
    {
        while(i&&j)
        {
            b[--j]+=a[--i];
        }
        for(int x=sizeb-1;x>0;x--)
        {
            if(b[x]>=10)
            {
                b[x]%=10;
                b[x-1]+=1;
            }
        }
        for(int x=0;x<sizeb;x++)
        {
            a[x]=b[x];      // by chance the size of b is bigger, the same process is done with b array and the sum elements is moved to a array.
        }
    }
        int max=sizea>=sizeb?sizea:sizeb;
        LinkedListNode *head,*p=NULL;
        for(int x=max-1;x>=0;x--)
        {
            head=(LinkedListNode *)malloc(sizeof(LinkedListNode));
            head->val=a[x];
            head->next=p;
            p=head;
        }
    return p;


}

int main()
{
    FILE *f = stdout;
    char *output_path = getenv("OUTPUT_PATH");
    if (output_path) {
        f = fopen(output_path, "w");
    }

    LinkedListNode* res;
    int list1_size = 0;

    LinkedListNode* list1 = NULL;
    LinkedListNode* list1_tail = NULL;

    scanf("%d\n", &list1_size);
    for(int i = 0; i < list1_size; i++) {
        int list1_item;
        scanf("%d", &list1_item);
        list1_tail = _insert_node_into_singlylinkedlist(list1, list1_tail, list1_item);

        if(i == 0) {
            list1 = list1_tail;
        }
    }


    int list2_size = 0;

    LinkedListNode* list2 = NULL;
    LinkedListNode* list2_tail = NULL;

    scanf("%d\n", &list2_size);
    for(int i = 0; i < list2_size; i++) {
        int list2_item;
        scanf("%d", &list2_item);
        list2_tail = _insert_node_into_singlylinkedlist(list2, list2_tail, list2_item);

        if(i == 0) {
            list2 = list2_tail;
        }
    }


    res = addLists(list1, list2);
    while (res != NULL) {
        fprintf(f, "%d", res->val);

        res = res->next;
    }

    fclose(f);
    return 0;
}
